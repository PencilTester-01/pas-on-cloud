AWSTemplateFormatVersion: 2010-09-09
Resources:
  PeerNetworksLambdaPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: Policy for PeerNetworks Lambda
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:AuthorizeSecurityGroupEgress'
              - 'ec2:AuthorizeSecurityGroupIngress'
              - 'ec2:UpdateSecurityGroupRuleDescriptionsEgress'
              - 'ec2:AcceptVpcPeeringConnection'
              - 'ec2:DeleteVpcPeeringConnection'
              - 'ec2:DeleteRoute'
              - 'cloudformation:DescribeStackResources'
              - 'cloudformation:DescribeStackResource'
              - 'ec2:UpdateSecurityGroupRuleDescriptionsIngress'
              - 'ec2:RevokeSecurityGroupIngress'
              - 'ec2:CreateRoute'
              - 'ec2:RevokeSecurityGroupEgress'
              - 'ec2:CreateVpcPeeringConnection'
            Resource:
              - 'arn:aws:ec2:*:*:vpc-peering-connection/*'
              - 'arn:aws:ec2:*:*:route-table/*'
              - 'arn:aws:ec2:*:*:security-group/*'
              - 'arn:aws:ec2:*:*:vpc/*'
              - 'arn:aws:cloudformation:*:*:stack/*/*'
  PeerNetworksLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref PeerNetworksLambdaPolicy
  PeerNetworksLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |-
                  import urllib
                  import boto3
                  import time
                  import cfnresponse
                  import uuid
                  def lambda_handler(event, context):
                      try:
                          physicalResourceId = str(uuid.uuid4())
                          if 'PhysicalResourceId' in event:
                              physicalResourceId = event['PhysicalResourceId']
                          if event['RequestType'] == 'Delete':
                              return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
                          if event['RequestType'] == 'Create':
                              CloudFormationNameRequester = event['ResourceProperties']['CloudFormationName']
                              CloudFormationNameAccepter = event['ResourceProperties']['CloudFormationSecondaryRegionName']
                              AccepterRegion = event['ResourceProperties']['SecondaryRegionName']
                              cf_requester_client = boto3.client('cloudformation')
                              cf_accepter_client = boto3.client('cloudformation',AccepterRegion)
                              ec2_requester_resource = boto3.resource('ec2')
                              ec2_accepter_resource = boto3.resource('ec2',AccepterRegion)
                              # Fetch physical resource ids of VPC, Route Table
                              response = cf_requester_client.describe_stack_resource(StackName=CloudFormationNameRequester,LogicalResourceId='PASVPC')
                              vpc_requester_id = response['StackResourceDetail']['PhysicalResourceId']
                              response = cf_requester_client.describe_stack_resource(StackName=CloudFormationNameRequester,LogicalResourceId='PASPrivateRT')
                              route_table_requester_id = response['StackResourceDetail']['PhysicalResourceId']
                              # Fetch physical resource ids of VPC, Route Table
                              response = cf_accepter_client.describe_stack_resource(StackName=CloudFormationNameAccepter,LogicalResourceId='PASVPC')
                              vpc_accepter_id = response['StackResourceDetail']['PhysicalResourceId']
                              response = cf_accepter_client.describe_stack_resource(StackName=CloudFormationNameAccepter,LogicalResourceId='PASPrivateRT')
                              route_table_accepter_id = response['StackResourceDetail']['PhysicalResourceId']
                              # Create Peering connection
                              vpc_requester = ec2_requester_resource.Vpc(vpc_requester_id)
                              vpc_peering_connection = vpc_requester.request_vpc_peering_connection(DryRun=False,PeerVpcId=vpc_accepter_id,PeerRegion=AccepterRegion)
                              # Accept Peering connection (wait 2 seconds until the peer exists in second region)
                              vpc_peering_connection_accepter = ec2_accepter_resource.VpcPeeringConnection(vpc_peering_connection.id)
                              time.sleep(2)
                              response = vpc_peering_connection_accepter.accept()
                              # Fetch VPC CIDRs from the peering connection (for further use)
                              vpc_cidr_requester = response['VpcPeeringConnection']['RequesterVpcInfo']['CidrBlock']
                              vpc_cidr_accepter = response['VpcPeeringConnection']['AccepterVpcInfo']['CidrBlock']
                              route_table_requester = ec2_requester_resource.RouteTable(route_table_requester_id)
                              route_table_accepter = ec2_accepter_resource.RouteTable(route_table_accepter_id)
                              route_table_requester.create_route(DestinationCidrBlock=vpc_cidr_accepter, VpcPeeringConnectionId=vpc_peering_connection.id)
                              route_table_accepter.create_route(DestinationCidrBlock=vpc_cidr_requester, VpcPeeringConnectionId=vpc_peering_connection.id)
                              return cfnresponse.send(event, context, cfnresponse.SUCCESS, None, {}, physicalResourceId)
                      except Exception as e:
                          print ("Error on creating network peering. Error: {0}".format(e))
                          return cfnresponse.send(event, context, cfnresponse.FAILED, None, {}, physicalResourceId)

      Description: Lambda to create and configure network peering
      Handler: PeerNetworksLambda.lambda_handler
      Role: !GetAtt
        - PeerNetworksLambdaRole
        - Arn
      Runtime: python3.7
      Timeout: 7
    DependsOn:
      - PeerNetworksLambdaPolicy
  PeerNetwork:
    Type: 'AWS::CloudFormation::CustomResource'
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt
        - PeerNetworksLambda
        - Arn
      CloudFormationName: !Ref CloudFormationName
      SecondaryRegionName: !Ref SecondaryRegionName
      CloudFormationSecondaryRegionName: !Ref CloudFormationSecondaryRegionName
Parameters:
  CloudFormationName:
    Type: String
    Description: The name of the Network CloudFormation in current region
  SecondaryRegionName:
    Type: String
    Description: The name of the region where the second CloudFormation was deployed
  CloudFormationSecondaryRegionName:
    Type: String
    Description: The name of the Network CloudFormation in the second region
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Current Region parameters
        Parameters:
          - CloudFormationName
      - Label:
          default: Secondary Region parameters
        Parameters:
          - SecondaryRegionName
          - CloudFormationSecondaryRegionName
    ParameterLabels:
      CloudFormationName:
        default: 'The name of the Network CloudFormation in current Region:'
      SecondaryRegionName:
        default: 'The name of the Region where the second CloudFormation was deployed:'
      CloudFormationSecondaryRegionName:
        default: 'The name of the Network CloudFormation in the second Region:'